var tipuesearch = {"pages": [{'title': 'About', 'text': '利用已經帶有 Brython 執行環境的倉儲, 在設定學員 Github Classroom 首次作業時, 即經由 template 置入, 因此學員只要: \n 利用學校 email 帳號, 建立 Github 帳號, 以英文姓名縮寫加上一組數字, 選擇最短帳號名稱 例如: jfk40723199, jfk 為其自選的姓名縮寫, 而隨後則加上各自的學號. \n 擁有 Github 帳號後, 即可透過 Github Classroom assignment 連結取得作業倉儲, 自行在倉儲中設定 Github Pages 後, 即可啟用作業網站 (以下 所謂網站均指靜態網站 , 而用來編輯網站內容的 動態網站, 則統稱為網際內容編輯器 , 使用動態網站的目的在編輯靜態網站的內容). 網站內容經過編輯之後, 必須建立新的網站內容 (使用 generate_pages), 然後將新的網站內容更新到對應的 Github 倉儲中 (稱為改版, 其過程經歷 git add, git commit 與 git push 等階段). \n git 為分散式版次管理系統工具. \n git add \n git commit \n git push \n \n 利用 Github Classroom 給每一位學員一個倉儲, a.k. (also known as) 網站 (靜態與動態) \n 每四位學員一組建立一個協同倉儲, a.k. 協同網站 (靜態與動態) \n 靜態網站: Github Pages, Nginx (under public_html) 或 Fossil SCM (under documentation) \n 動態網站: localhost, replit or Ubuntu server \n repo:  https://github.com/mdecycu/cp2023 \n site:  https://mde.tw/cp2023', 'tags': '', 'url': 'About.html'}, {'title': 'git commands', 'text': '', 'tags': '', 'url': 'git commands.html'}, {'title': 'git add', 'text': '詢問  ChatGPT : \n 如何向初學者說明 Git 指令中的 git add? \n 當向初學者解釋 Git 指令中的 "git add" 時，可以使用以下方式進行說明： "git add" 是 Git 版本控制系統中的一個指令，它的主要功能是將文件的更改加入到 Git 的暫存區（或稱為索引）中。在 Git 中，暫存區是一個重要的概念，它允許你將要提交的文件更改分開處理。 以下是一個對 "git add" 的解釋： 1. "git add" 是一個用於指示 Git 追蹤和紀錄文件更改的指令。 2. 當你對文件做出修改後，Git 並不會自動將這些更改紀錄下來。相反，你需要使用 "git add" 將更改添加到暫存區。 3. 暫存區是一個中間階段，它允許你選擇性地將特定文件或特定文件的更改紀錄下來，而不是將所有更改都直接提交到 Git 儲存庫。 4. 使用 "git add" 指定要加入暫存區的文件或文件夾，例如 "git add filename" 或 "git add foldername"。 5. 一旦你使用 "git add" 將文件更改添加到暫存區，Git 就會開始跟蹤這些更改，並準備將它們包含在下一次的提交中。 簡而言之，"git add" 是一個將文件更改紀錄下來並加入到 Git 暫存區的指令。這樣可以讓你選擇性地將特定的更改提交到版本控制系統中，而不是一次性提交所有更改。這樣可以提供更大的靈活性和精細的控制，並使版本控制更具效率。 \n 再問: \n 何謂 Git 暫存區（或稱為索引）? \n Git 暫存區（或稱為索引）是 Git 版本控制系統中的一個重要概念，它在版本控制的過程中扮演了關鍵的角色。以下是對 Git 暫存區的解釋： 1. 暫存區是一個位於 Git 儲存庫中的中間區域。它用於暫時存放文件的更改，這些更改將在下一次提交（commit）時納入版本控制。 2. 當你對文件進行修改時，Git 不會自動將這些更改紀錄下來。相反，你需要使用 "git add" 將更改添加到暫存區。 3. 暫存區可以理解為一個緩衝區，它允許你選擇性地將特定文件或特定文件的更改分開處理，而不是將所有更改都直接提交到儲存庫。 4. 在進行 "git commit" 提交操作時，Git 會將暫存區中的文件快照（snapshot）記錄為一個新的提交。這樣的好處是你可以按照需要對更改進行分組，而不必一次性提交所有更改。 5. 使用暫存區可以提供更大的靈活性和精細的控制，因為你可以檢查即將提交的更改，並在提交之前對其進行調整或分離。 簡而言之，暫存區是 Git 版本控制系統中用於存放即將提交的文件更改的區域。它允許你選擇性地將特定文件或特定文件的更改紀錄下來，並在進行提交之前對其進行調整。這樣的機制提供了更大的彈性和細粒度的控制，幫助你更有效地管理和追蹤文件的變更。 \n 再問: \n Git 暫存區是在倉儲的哪個地方, 資料會一直存在還只是暫存? \n Git 暫存區（或稱為索引）是存放在 Git 儲存庫中的一個特殊文件，而不是存放在特定的目錄中。它是儲存庫的一部分，位於 ".git" 目錄中。暫存區本身並不是一個單獨的物理位置，而是儲存庫中的一個特定狀態。 資料在暫存區中只是暫時存在，並不會永久保存。當你對文件進行 "git add" 操作，Git 會將相應的更改紀錄到暫存區中。這些更改在提交之前只存在於暫存區，並且可以隨時進行修改或取消。 一旦你執行 "git commit" 命令提交更改，Git 將會根據暫存區中的內容創建一個新的提交（commit），並將該提交保存到儲存庫的歷史記錄中。這樣的提交會持久保存，成為了儲存庫的一部分。暫存區在每次提交後都會被清空，準備接收下一次更改。 因此，暫存區是一個用於暫時保存更改的區域，當你準備好提交這些更改時，它們將被永久記錄到儲存庫中。資料在暫存區中並不是永久存在的，而是在提交前的過程中的一個臨時階段。 \n 再問: \n 何謂提交? \n 在版本控制系統（如Git）中，"提交"（commit）是指將文件或代碼更改保存到儲存庫的歷史記錄中的操作。提交創建了一個新的快照（snapshot），記錄了儲存庫在某個時間點上的狀態。以下是對提交的解釋： 1. 提交是版本控制系統中的重要概念，它表示你希望將文件或代碼更改永久地保存到儲存庫中。 2. 當你對文件進行修改並滿意結果後，可以使用 "git add" 命令將更改添加到 Git 的暫存區（或索引）中。 3. 一旦你將所有需要提交的更改都添加到暫存區中，可以使用 "git commit" 命令來創建一個新的提交。 4. 提交是一個具有唯一標識（commit hash）的快照，它記錄了儲存庫在提交時的狀態，包括被更改的文件和它們的內容。 5. 每個提交都可以包含一個相關的提交消息（commit message），用於描述這個提交所做的更改、修復的問題或任何相關信息。 6. 提交的歷史記錄是順序的，每次提交都建立在前一個提交的基礎之上，形成一個有向無環圖（DAG）結構。 7. 提交的歷史記錄使你能夠追蹤和恢復過去的更改，合作和協調工作，以及進行分支和合併操作等。 提交在版本控制中扮演著關鍵的角色，它確保了文件更改的持久性和可追蹤性。通過進行提交，你可以記錄並保留儲存庫在不同時間點上的狀態，並隨時查看、比較和回溯到過去的版本。 \n 再問: \n 當使用者執行 git add . 之後,\xa0 git.exe 具體做了甚麼動作? \n 當使用者執行 "git add ." 命令後，"git.exe" 會執行以下動作來處理這個指令： 1. "git.exe" 會分析目前工作目錄中的所有更改，包括修改的文件和新建的文件。 2. 它會將這些更改的文件路徑和內容紀錄到 Git 儲存庫的暫存區中。暫存區實際上是一個特殊的 Git 檔案，位於 ".git" 目錄中，用於記錄即將提交的更改。 3. 如果有新的文件被添加到工作目錄中，它們將被添加到暫存區。對於已經存在的文件，它會比對工作目錄中的版本和暫存區中的版本之間的差異，並將這些差異紀錄到暫存區中。 4. "git.exe" 會為每個被添加到暫存區的文件生成一個 SHA-1 雜湊值，用於唯一識別文件的內容。 5. 在將文件的內容和元資料紀錄到暫存區後，"git.exe" 完成了 "git add ." 的操作。 總結來說，"git add ." 命令告訴 "git.exe" 將所有更改的文件路徑和內容紀錄到 Git 的暫存區中，準備進行提交。這樣可以將更改分開處理，提供了更大的彈性和控制，讓你能夠選擇性地提交特定的更改，而不是一次性提交所有更改。 \n 再問: \n 甚麼是文件的 SHA-1 雜湊值? \n SHA-1（Secure Hash Algorithm 1）雜湊值是一種密碼學演算法，用於將數據（例如文件或消息）轉換為固定長度的唯一字串。在 Git 中，文件的 SHA-1 雜湊值是使用 SHA-1 算法計算出的 40 個字符的字串，用於唯一識別文件的內容。 以下是文件的 SHA-1 雜湊值的一些特點和作用： 1. 唯一性：SHA-1 算法通過將文件的內容轉換為唯一的雜湊值，確保不同文件具有不同的雜湊值。即使文件的內容只有微小的差異，其雜湊值也會完全不同。 2. 固定長度：SHA-1 雜湊值始終為 40 個字符，無論文件的大小。這使得雜湊值的長度在不同大小的文件中保持一致。 3. 安全性：SHA-1 是一個具有強大加密性能的雜湊算法。它對於碰撞（collision）攻擊的抵抗力相對較強，碰撞攻擊是指找到兩個不同的文件，它們的雜湊值相同。然而，由於 SHA-1 已經被認為不再足夠安全，因此在某些安全敏感的應用中已經被更強的雜湊算法（如 SHA-256）所取代。 在 Git 中，每個文件的內容都會被計算出一個唯一的 SHA-1 雜湊值。這個雜湊值用於識別文件，確保文件的完整性和不易被篡改。在儲存庫中，Git 使用這些雜湊值來追蹤文件的歷史、比較文件的更改，以及進行版本控制操作。 \n 再問: \n 如何說明密碼學演算法? \n 密碼學演算法是用於處理數據的數學算法，旨在保護數據的安全性、完整性和機密性。它們使用各種數學和計算方法，以加密（加上密碼）和解密（解開密碼）的方式處理數據，使得只有擁有正確密鑰的人能夠解讀和存取數據。以下是對密碼學演算法的解釋： 1. 加密：密碼學演算法使用一個密鑰（通常是一個秘密的數字、字串或文件）來對數據進行加密。加密是將原始數據轉換成看似隨機的、不可讀的格式的過程。只有使用正確的密鑰進行解密操作，才能將加密後的數據還原為原始形式。 2. 解密：解密是使用相應的密鑰對加密數據進行反向操作，以還原出原始的、可讀的數據。只有擁有正確的密鑰的人才能夠成功解密並取得原始數據。 3. 對稱加密：在對稱加密中，同一個密鑰用於加密和解密數據。發送者和接收者必須共享同一個密鑰，並且將其保密。常見的對稱加密演算法有 AES（Advanced Encryption Standard）和 DES（Data Encryption Standard）。 4. 非對稱加密：在非對稱加密中，使用一對密鑰，包括公鑰和私鑰。公鑰用於加密數據，而相應的私鑰用於解密數據。公鑰可以公開分享，而私鑰必須保持秘密。常見的非對稱加密演算法有 RSA 和 ECC（Elliptic Curve Cryptography）。 5. 雜湊函數：雜湊函數將任意大小的數據轉換成固定長度的數字串，稱為雜湊值或摘要。這個過程是單向的，無法將雜湊值還原為原始數據。雜湊函數常用於校驗數據的完整性和識別數據的唯一性，並在密碼學中用於確保', 'tags': '', 'url': 'git add.html'}, {'title': 'Computer', 'text': "Physical and Virtual PC ( Virtualbox ) \n Operating Systems: \n Windows \n Ubuntu \n Network: \n Internet \n The internet represents a global network of interconnected computer systems that facilitates the exchange of information and data across physical borders. This technology has emerged as one of the most significant inventions of modern times, transforming the way we communicate, conduct commerce, and access information. At its core, the internet comprises millions of connected computing systems and servers, linked together through a sophisticated architecture of routers, switches, and other networking components. It enables users to access a diverse range of digital resources, including email, social media platforms, online shopping, and entertainment services. The internet operates on a standardized set of protocols, such as Transmission Control Protocol/Internet Protocol (TCP/IP), which regulates the flow of data across the network. This allows computing devices, regardless of their location or operating system, to communicate and exchange information seamlessly. The internet has brought about a significant transformation in many aspects of modern life, facilitating unprecedented access to information and services. Its global reach has expanded commercial opportunities for businesses, enabling them to extend their reach beyond geographical borders. Furthermore, the internet has fostered new opportunities for collaboration and communication between people separated by distance. Nevertheless, the internet's ubiquitous nature and prevalence pose new challenges, including security threats and concerns over privacy. Consequently, significant research and development efforts continue towards developing new technologies and standards to bolster the security and resilience of the internet, while safeguarding its openness and accessibility for all users. \n WWW \n The World Wide Web (WWW) is an interconnected network of digital resources, which operates as a subset of the internet, providing users with an unprecedented ability to access and share information. The WWW has emerged as one of the most transformative technological advancements of the late 20th century, revolutionizing the way individuals obtain knowledge, conduct commerce, and collaborate with others. At its core, the WWW relies on standardized protocols, such as the Hypertext Transfer Protocol (HTTP), which regulate the transmission and retrieval of web resources across the internet. Web servers host these resources, which clients typically access through a web browser. The WWW has significantly impacted modern society, enabling individuals and businesses to share information and connect with others on a global scale. Through the WWW, users have access to an extensive range of digital resources, including web pages, multimedia content, and online services. The WWW has facilitated the globalization of commerce and expanded educational opportunities for learners around the world. However, the WWW also presents new challenges, including concerns regarding privacy, security, and the spread of misinformation. As such, significant research and development efforts continue to focus on enhancing the security and reliability of the web, while preserving its openness and accessibility for all users. \n Git distributed version control system: \n git_essential_document.7z  (password protected for cp2023) \n Git is a distributed version control system (VCS) designed for software development, providing a reliable and efficient means for managing source code and enabling collaborative development workflows. Developed by Linus Torvalds in 2005, it has since emerged as a widely adopted VCS, with a rich set of features and powerful tools for managing complex codebases. Git allows developers to track changes to their codebase over time, by creating and maintaining a history of all modifications made to files and directories. It provides a decentralized architecture, where each developer has their own local copy of the repository, which can be synced with remote repositories, such as those hosted on GitHub or GitLab. Git's robust set of features includes branching and merging, which enable developers to create isolated copies of the codebase, work on new features or bug fixes, and then merge those changes back into the main codebase when ready. This allows developers to experiment with new ideas and features, without disrupting the overall stability of the codebase. Additionally, Git provides tools for resolving conflicts that may arise when multiple developers are working on the same codebase. It supports a wide range of workflows, including peer code review, continuous integration, and deployment, which enhance collaboration and productivity. In conclusion, Git represents a key technology in modern software development, offering a flexible, scalable, and reliable means for managing codebases and enabling collaborative workflows. Its widespread adoption across the industry attests to its robustness and effectiveness in handling complex software development tasks. \n", 'tags': '', 'url': 'Computer.html'}, {'title': 'Javascript', 'text': '瀏覽器就是你的電腦程式環境 \n http://jsforcats.com/  (貓咪學 JavaScript) \n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide \n https://eloquentjavascript.net/ \n \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'Brython', 'text': 'https://stackabuse.com/an-introductory-guide-to-brython/   \n https://www.geeksforgeeks.org/introduction-to-brython/   \n https://realpython.com/brython-python-in-browser/   \n \n cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束 ', 'tags': '', 'url': 'Brython.html'}, {'title': 'Python', 'text': 'https://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf \n https://python.swaroopch.com/ \n https://github.com/wenbindu/ThinkPython2-CN \n https://automatetheboringstuff.com/2e/chapter0/ \n Flask based: \n https://github.com/mdecycu/cmsimde \n PyQt based: \n https://github.com/leo-editor/leo-editor   \n https://github.com/KmolYuan/Pyslvs-UI   \n', 'tags': '', 'url': 'Python.html'}, {'title': 'ANSI C', 'text': 'https://www.learn-c.org/ \n https://www.programiz.com/c-programming \n Arduino: \n https://docs.arduino.cc/ \n https://www.tinkercad.com/circuits   \n https://wokwi.com/   \n https://all3dp.com/2/best-arduino-simulators-online-offline/   \n Tiny C Compiler: \n https://bellard.org/tcc/', 'tags': '', 'url': 'ANSI C.html'}]};