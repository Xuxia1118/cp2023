var tipuesearch = {"pages": [{'title': 'About', 'text': 'Course Title: Introduction to Computer Programming (計算機程式) \n Make computers work for us. \n Teaching Methods: \n \n lectures \n instruction \n projects \n self-study \n \n  請各學員自行準備一副有線耳機, 若使用手機觀看影片, 則可以準備手機適用的有線或無線耳機   . \n 本課程為機械設計工程系大一的計算機程式課程, 課程目標在教導學員如何利用網站整理與機械設計相關的資訊, 並能直接在網站與伺服器中編寫簡單的 HTML、Javascript (using  Learn Javascript )、Brython 與 Python 程式 (using  100 Days of Code  and  CS50 ), 目的是能在隨後的網際內容管理、電腦輔助設計與實習以及協同產品設計實習等課程中加以應用. \n basic_portable_python.7z  (下載 15MB, 解開後 55MB) \n 下載  Portable_2023_fall_1.3g_5g.7z  (需要下載密碼) \n Programming with python for engineers.pdf  (需要下載密碼) \n C, C++, Java, Python, PHP, Javascript and Linux for Beginners.pdf \xa0(需要下載密碼) \n \n 為什麼需要學習計算機程式? \n  https://flatironschool.com/blog/reasons-why-you-should-learn-computer-programming/  \n \n  https://www.indeed.com/career-advice/career-development/why-you-should-learn-programming  \n 計算機程式之於機械工程師: \n  https://skill-lync.com/blogs/reasons-mech-auto-engineers-learn-programming  \n  https://www.imeche.org/news/news-article/future-skills-week-why-programming-is-key-to-engineering-communication  \n In the past decade, the need for computer programming skills has been emphasised across all STEM (Science, Technology, Engineering and Mathematics) sectors, and engineering is no exception. The axiom "coding is the new literacy" has made its way into news headlines and professional development guides in many industries. Although the phrase might be something of an exaggeration, universities are beginning to integrate coding into their engineering curricula. The goal, explains Dr Hongwei Zhang, deputy head of the Department of Engineering and Mathematics at Sheffield Hallam University, is not to create a workforce of computer scientists, but to  allow engineers to communicate more effectively with tech-focused colleagues .  "We are planning to introduce more automated systems in the second and third year of our mechanical engineering course," he says. "So students will be doing  programming that is necessary for the application of Industry 4.0 . They may not need to do the programming themselves when they have entered into the workforce after graduation, but they need to understand how programming is done so they can  talk to computer scientists and electrical engineers to get something automated ." \n  https://www.javatpoint.com/python-for-mechanical-engineers  (需要將重點整理至個人網頁) \n  https://github.com/angelsolaorbaiceta/Mechanics  (需要將重點整理至個人網頁) \n 參考: \n how-to-make-almost-anything-修課經驗分享 \n https://fab.cba.mit.edu/classes/MAS.863/ \n Knowledge game and art of computer programming.pdf  (需要下載密碼) \n ICILS 2018.pdf  (需要下載密碼) \n \n 課程環境: \n 當廣域網路暢通時: \n 以 Ubuntu 帳號執行網站編輯器, 程式編寫與心得說明後轉為靜態網頁後, 程式原始碼存至 Gist, 在靜態網站中執行, 靜態網站則以 Github Pages 方式運作. \n 也可以利用 Replit 帳號從 Github 將網站倉儲 import 後, 在 Replit 中執行網站編輯器, 將程式存至 Gist, 在靜態網站中執行, 靜態網站則以 Github Pages 方式運作. \n 在無廣域網路連線時: \n 自行利用區域網路所提供的可攜程式套件, 以及 cmsimde 建立近端網站進行課程項目練習. \n 利用既有帳號 (Google、Github、Facebook or Apple) 登入 Replit: \n 1.  https://youtu.be/PkZNo7MFNFg  (Youtube: Learn Javascript for Beginners) \n 2. 在 Replit 平台上學習 Python:   https://replit.com/learn/100-days-of-python   (   不同帳號對應使用資源   ) \n Youtube:   https://www.youtube.com/watch?v=ASZVEe2WkI4  \n Harvard CS50 Introduction to Programming with Python  (Youtube) \n Advanced Python  (Youtube) \n \n 學員主要網站: \n 個人網站: github_帳號.github.io (   Github Pages   ) \n 分組網站: 由 Github Classroom 指定的分組作業網站 \n 開場: \n 電腦輔助設計室、協同設計室與工作站室介紹 \n 網路設定 \n Windows 基本操作 (   Beginning Windows 10   ,   Windows 11 Made Easy   ) \n  中文注音   、與   英文輸入   練習 (   行列輸入法   ) \n  命令列與批次檔案  \n  Powershell 與網路設定  \n 網路軟硬體資源介紹 (   ChatGPT   、   VPN   、   PKI   、   Springer   、操作系統與其他教育版套件下載與安裝) \n 建立帳號與網站: \n 利用已經帶有 Brython 執行環境的倉儲, 在設定學員 Github Classroom 首次作業時, 即經由 template 置入, 因此學員只要: \n 利用學校 email 帳號, 建立 Github 帳號, 以英文姓名縮寫加上一組數字, 選擇最短帳號名稱 例如: jfk40723199, jfk 為其自選的姓名縮寫, 而隨後則加上各自的學號. \n 擁有 Github 帳號後, 即可透過 Github Classroom assignment 連結取得作業倉儲, 自行在倉儲中設定 Github Pages 後, 即可啟用作業網站 (以下   所謂網站均指靜態網站   , 而用來編輯網站內容的   動態網站, 則統稱為網際內容編輯器   , 使用動態網站的目的在編輯靜態網站的內容). 網站內容經過編輯之後, 必須建立新的網站內容 (使用 generate_pages), 然後將新的網站內容更新到對應的 Github 倉儲中 (稱為改版, 其過程經歷 git add, git commit 與 git push 等階段). \n git 為分散式版次管理系統工具. \n git add \n git commit \n git push \n \n 利用 Github Classroom 給每一位學員一個倉儲, a.k. (also known as) 網站 (靜態與動態) \n 每四位學員一組建立一個協同倉儲, a.k. 協同網站 (靜態與動態) \n 靜態網站: Github Pages, Nginx (under public_html) 或 Fossil SCM (under documentation) \n 動態網站: localhost, replit or Ubuntu server \n \n 課程評分: 線上測驗、期中網站與簡報、期末網站與簡報. \n 線上測驗: w1 建立帳號後 ( 請將密碼寫入手機的備忘錄 ), 每週不定時進行. \n 期中網站與簡報: 期中考前一週開始進行. \n 期末網站與簡報: 期末考前一週開始進行. \n 期中成績: 期中考與之前各週線上測驗成績平均 \n 學期成績: (期中成績與之後各週線上測驗成績平均)*60%+(期中網站與簡報成績)*20%+(期末網站與簡報成績)*20% \n repo:   https://github.com/mdecycu/cp2023  \n site:   https://mde.tw/cp2023   or   https://cad2.cycu.org/~yen/cp2023  \n MS Teams 代碼: plmm43c \n 行事曆 \n  全頁檢視  \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'w1_task', 'text': '完成本節中的各項任務後, 表示你將可以登入: \n \n 學校 email 帳號郵箱 \n Gmail 帳號郵箱 \n Replit IDE 系統 (以 Gmail 帳號登入) \n Github 系統 \n Onedrive 系統 \n \n 登入學校 Email 郵箱: \n 學校 Webmail:  https://mail.nfu.edu.tw  (帳號為: 學號@nfu.edu.tw, 用來通知 stud.cycu.org 主機上的帳號密碼與學期成績) \n 申請或登入 Gmail: \n 假如尚未擁有 Gmail 帳號, 請自行 申請一個 Gmail 帳號 , 可用來 登入 Replit  線上 IDE 系統. \n 申請 Github 帳號: \n 請利用"學號@nfu.edu.tw"在 Github  註冊 一個帳號, 帳號名稱可以選擇學號, 或者用英文姓名的三個字母縮寫加上學號作為 Github 帳號. 帳號建立後必須進入  https://mail.nfu.edu.tw  回覆確認信件後, 才能開始使用 Github. \n 由於 Github 要求所有用戶在 2023 年底之前要使用 2FA 認證方式登入, 使用者可以在手機中先安裝 Github Mobile App, 假如只希望利用手機取得 2FA token (六個阿拉伯數字) 則可以在手機中安裝 Google Authenticator App, 若也希望利用 Apple Watch 取得 2FA token, 則可以在手機中安裝 Authy App. \n 將 Github 帳號登入所需的 2FA 認證設定於手機的 Google Authenticator 或 Authy 的流程為: \n 1. 登入 Github 後, 進入帳號 Settings - Password and authentication - Two-factor authentication 下, 若此時手機已經安裝 Github Mobile App, 且以 Github 帳號登入, 則 Preferred 2FA methods 選項中將會顯示 Github Mobile, 表示此時啟動 2FA 認證流程, 則使用者登入 Github 時, 除了輸入帳號密碼外, 還需要在手機的 Github Mobile App 中確認同意該使用者登入 Github, 系統才會允許登入. \n 2. 接下來, 在 Two-factor methods 下點選 Authenticator app 右方的 Add (若要變更手機所使用的 2FA token 產生程式, 則點選 Edit), 視窗中將會出現一組二維條碼, 使用者可以利用手機開啟 Google Authenticator 或 Authy 中的 account add 功能開啟相機拍二維條碼後, 將 Github 帳號登錄至手機認證套件中. \n 3. 一旦上述 Github 帳號在手機中的 2FA 認證設定完成, 使用者可以將前述內建為 Github Mobile 的 Preferred 2FA methods 改為 Authenticator app, 之後再登入 Github, 除了必須輸入對應的帳號密碼之外, 還需要輸入在特定時段內輸入手機或手錶中對應帳號所顯示的六個數字 (即 2FA token), 才能正式登入. \n 4. 至於手機中的 Authenticator 也可以再利用 Pin 密碼、指紋或人臉辨識流程加入安全保護. \n Github 帳號在計算機程式課程中的用途: \n \n 領取  Github Classroom  系統所指定的作業 \n 建立個人網站:  https://github_帳號.github.io \n 將計算機程式課程中所編寫的程式與相關資料存入 Github 帳號下的 Gist \n \n 在 Github 中, 將所建立的倉儲轉為網站, 可以在建立倉儲時, 以  https://github.com/mdecycu/cmsite  作為 template, 首先學習如何利用 Replit 維護網站內容, 隨後則可利用 stud 伺服器中的帳號進行 Github 倉儲與網站內容的維護, 最後也可以在近端可攜程式環境中維護 Gthub 倉儲與網站內容. \n 利用 Github 建立個人網站 (透過  Github Pages ) 有以下目標: \n \n 可在網站中自我介紹 ( https://www.betterup.com/blog/how-to-introduce-yourself ) \n 可在網站中展示並介紹自己寫過的程式 \n 可在網站中簡介自己修過的課程內容 \n 可在網站中說明自己曾經參與過的專題 \n 可在網站中介紹自己未來的生涯規劃 \n \n 申請 onedrive 帳號: \n \n 登入學校郵箱 (用來收帳號建立確認信) \n 至  https://www.microsoft.com/zh-tw/education/products/office , 以 @nfu 帳號申請 OneDrive 帳號. \n \n onedrive 帳號在計算機程式課程中的用途: \n \n 擁有線上 5TB 的儲存空間, 可用來儲存個人所建立的流程操作 mp4 影片, 並嵌入個人網頁或作業網站中 \n 擁有線上 5TB 的儲存空間, 可用來儲存與課程相關的 教育版授權軟體  (例如:  Win10 22h2.4.iso , Win11  22h2.6.iso ,  kms.bat ) 或可攜程式系統檔案與 電子書 \n 登入後可參與計算機程式課程 Teams (2023 計算機程式 MS Teams 代碼為: plmm43c) \n 登入後可下載計算機程式課程網站中的相關檔案 \n', 'tags': '', 'url': 'w1_task.html'}, {'title': 'HTML', 'text': ' https://developer.mozilla.org/zh-TW/docs/Glossary/HTML  \n Canvas:   https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial  \n  在  html 文件中加入註解的方法  \n \n  add the canvas tag first  \n \n  將 canvas 標註的 id 設為 my_canvas, 以下讓 Javascript 在此畫布上進行繪圖  \n \n \n 上列圖形的程式碼: \n <!-- 在  html 文件中加入註解的方法 -->\n<!-- add the canvas tag first -->\n<!-- 將 canvas 標註的 id 設為 my_canvas, 以下讓 Javascript 在此畫布上進行繪圖 -->\n<p><canvas id="my_canvas" width="400" height="200"></canvas></p>\n<script>// <![CDATA[\n// Javascript 與 C 相同, 兩個斜線後可以加入單行註解\n/* 而多行註解的用法, 則是利用斜線加上 star sign 作為開頭\n然後使用 star sign 與斜線作為結尾.\n*/\n// Get the canvas element\n    // 將超文件中 id 為 my_canvas 的標註設定為 canvas 變數\n    var canvas = document.getElementById("my_canvas");\n    /* 利用 canvas 的 getContext() 方法指定 2D 繪圖,\n        且將此 2D 繪圖物件對應至變數 ctx\n    */\n    var ctx = canvas.getContext("2d");\n\n    // Set line properties\n    // 將 2D 繪圖物件的 strokeStyle 屬性設為紅色\n    ctx.strokeStyle = "red";\n    // 將 2D 繪圖物件的 lineWidth 屬性設為 5\n    ctx.lineWidth = 5;\n \n    // Draw the line\n    // 利用 2D 繪圖物件執行繪圖\n    ctx.beginPath();\n        ctx.moveTo(50, 50); // Starting point coordinates (x, y)\n        ctx.lineTo(350, 150); // Ending point coordinates (x, y)\n        ctx.stroke();\n// ]]></script> \n HTML canvas and Javascript 練習: \n \n 請根據上列 html 與 Javascript 繪線程式的語法, 找出繪圖座標原點. \n 請利用與上列繪圖相同粗細的藍色線條, 從繪圖座標原點出發, 畫一個長度為 200 Pixel 的正方圖形. \n 請將上列正方形改為圓形. \n 請將圓形中央部分塗上黃色. \n 請利用黑色畫筆在圓形中央, 以 14 Pixel 大小的字元, 寫出"半徑 100 Pixel 的圓形"字串. \n \n', 'tags': '', 'url': 'HTML.html'}, {'title': 'SolidJS', 'text': ' https://www.solidjs.com/  \n  https://wiki.nikiv.dev/programming-languages/javascript/js-libraries/solid  \n Solid is a JavaScript framework for making interactive web applications. With Solid, you can use your existing HTML and JavaScript knowledge to build components that can be reused throughout your app. Solid provides the tools to enhance your components with reactivity: declarative JavaScript code that links the user interface with the data that it uses and creates. \n  the first example  \n \n \n  the second example  \n \n \n HTML 與 Javascript 原始碼: \n <div id="my_div"></div>\n<script type="module">// <![CDATA[\nimport {\n        createSignal,\n        onCleanup,\n      } from "https://cdn.skypack.dev/solid-js";\n      import { render } from "https://cdn.skypack.dev/solid-js/web";\n      import html from "https://cdn.skypack.dev/solid-js/html";\n\n      const App = () => {\n        const [count, setCount] = createSignal(0),\n          timer = setInterval(() => setCount(count() + 1), 1000);\n        onCleanup(() => clearInterval(timer));\n        return html`<div>${count}</div>`;\n        // or\n        return h("div", {}, count);\n      };\n      render(App, document.getElementById("my_div"));\n// ]]></script> \n \n', 'tags': '', 'url': 'SolidJS.html'}, {'title': 'github', 'text': '深入了解與 Git 有關的 ebook:  https://git-scm.com/book/zh-tw/v2 \n Alternatives: \n Gitlab:   https://about.gitlab.com/pricing/  \n Bitbucket:   https://www.atlassian.com/software/bitbucket/pricing  \n Others:   https://www.softwaretestinghelp.com/github-alternatives/  \n  何謂 github?  \n GitHub 是一個基於 Git 版本控制系統的網站和平台，它提供了存儲、管理和共享程式碼的功能。以下是一個簡單的解釋，可用於向初學者解釋 GitHub：     GitHub 是一個網站，讓開發人員能夠儲存和共享他們的程式碼。程式碼是開發軟體的重要組成部分，它是一系列指令和指示，告訴電腦要執行什麼操作。在開發軟體時，通常會有多個人一起工作，每個人都會寫不同的程式碼，並且有時候需要整合彼此的工作。     GitHub 的用途就是讓開發人員能夠輕鬆地共享他們的程式碼並協同工作。當您在 GitHub 上創建一個倉儲（Repository），您可以將您的程式碼上傳到該倉儲中。其他人可以訪問並查看您的程式碼，也可以為您的項目做出貢獻，提出問題或提供改進意見。     GitHub 提供了許多功能，例如問題追蹤、合併請求（Pull Requests）、版本控制和分支管理。這些功能使得多人協同開發變得更加容易和有組織。您可以在倉儲中追蹤問題和錯誤，查看和審核其他人提交的更改，並在不影響主要程式碼的情況下進行分支開發和測試。     總結來說，GitHub 是一個在網路上存儲和共享程式碼的平台，使得開發人員能夠協同工作、追蹤問題和進行版本控制。它是一個廣泛使用的工具，用於開源項目、商業軟體開發和各種其他程式碼相關的任務。 \n', 'tags': '', 'url': 'github.html'}, {'title': 'Github Pages', 'text': 'GitHub Pages 是 GitHub 提供的一項功能，它可以讓您輕鬆地建立和發佈自己的網站。以下是一個簡單的說明，可用於向初學者解釋 GitHub Pages：     GitHub Pages 是一個功能，讓您能夠將您的網站部署到網路上，並透過 GitHub 托管它。如果您正在學習建立網站，或者希望在網路上展示您的專案、筆記、部落格或其他靜態內容，GitHub Pages 是一個很好的選擇。     使用 GitHub Pages 的好處在於它的簡單性和免費性。您可以將您的網站原始碼（例如 HTML、CSS 和 JavaScript 文件）上傳到 GitHub 上的特定倉儲（Repository）。然後，GitHub Pages 會自動處理網站的構建和發佈，並將您的網站託管在 GitHub 的伺服器上。     透過 GitHub Pages，您可以輕鬆地分享您的網站給他人查看。只需在特定的倉儲中創建一個名為 "username.github.io" 的倉儲（其中 "username" 是您的 GitHub 用戶名），然後將您的網站內容放在該倉儲中。您的網站將會在 "https://username.github.io" 的網址上可供訪問。     您可以使用 GitHub Pages 來展示您的專案、個人網站、筆記或其他靜態內容。只需將網站文件推送到您的 GitHub 倉儲，然後在網路上即可訪問。此外，您可以根據需要自定義網站的佈局、風格和內容。     總結來說，GitHub Pages 是一個方便且免費的方式，讓您能夠輕鬆地建立和發佈自己的網站。只需將網站文件上傳到 GitHub 上的特定倉儲，GitHub Pages 將會處理網站的構建和發佈，並提供一個網址供他人訪問您的網站。無論您是學習網站開發還是展示您的專案，GitHub Pages 都是一個非常實用的工具。 \n', 'tags': '', 'url': 'Github Pages.html'}, {'title': 'Incidence', 'text': '大如 Github 系統, 有時候也會發生故障 (Jun 28-29, 2023): \n https://www.githubstatus.com/ \n 前後花了 8 個小時才解決問題. \n Resolved \n This incident has been resolved. Posted 1 minute ago. Jun 29, 2023 - 06:43 UTC \n Update \n With the fix deployed, we are now seeing recovery across impacted scenarios. Posted 4 minutes ago. Jun 29, 2023 - 06:41 UTC \n Update \n We are continuing to rollout the fix for failing Actions jobs using the deployment environments feature. We are expecting the remaining rollout to take another hour Posted 39 minutes ago. Jun 29, 2023 - 06:05 UTC \n Update \n We are continuing to monitor the rollout of the fix for failing Actions jobs using the deployment environments feature. We are expecting the rollout to take up to another hour Posted 1 hour ago. Jun 29, 2023 - 05:24 UTC \n Update \n We are continuing to monitor the rollout of the fix for failing Actions jobs using the deployment environments feature. We are expecting the rollout to take up to another 1 to 1.5 hours. Posted 2 hours ago. Jun 29, 2023 - 04:54 UTC \n Update \n We are continuing to monitor the rollout of the fix for failing Actions jobs using the deployment environments feature. We are expecting the rollout to take up to 1.5 to 2 hours. Posted 2 hours ago. Jun 29, 2023 - 04:19 UTC \n Update \n We are monitoring the rollout of a fix for failing Actions jobs using the deployment environments feature. We are expecting the rollout to take a couple more hours. Posted 3 hours ago. Jun 29, 2023 - 03:32 UTC \n Update \n We are monitoring the rollout of a fix for failing Actions jobs using environments. The impact on GitHub Pages publishing continues. Posted 4 hours ago. Jun 29, 2023 - 03:12 UTC \n Update \n The fix for failing Actions jobs using environments is rolling out. We are expecting the rollout to take several hours to complete. The impact on GitHub Pages continues. Posted 4 hours ago. Jun 29, 2023 - 02:50 UTC \n Update \n The fix for failing Actions jobs using environments is rolling out. We are expecting the rollout to take several hours to complete. Posted 5 hours ago. Jun 29, 2023 - 02:02 UTC \n Update \n We are deploying a fix for failing Actions jobs using environments. The issue is also impacting GitHub Pages - deployments are pending in an approval stage. Posted 5 hours ago. Jun 29, 2023 - 01:26 UTC \n Update \n We continue working on a fix for failing Actions jobs using environments. Posted 6 hours ago. Jun 29, 2023 - 00:37 UTC \n Update \n We now understand the root cause of failing Actions jobs using environments. We are working on a fix. Posted 7 hours ago. Jun 29, 2023 - 00:11 UTC \n Update \n We are seeing failures in Actions jobs using environments. Downstream impact on the deployments of GitHub Pages. We are investigating more details. Posted 7 hours ago. Jun 28, 2023 - 23:39 UTC \n Update \n API Requests is operating normally. Posted 7 hours ago. Jun 28, 2023 - 23:35 UTC \n Update Pages is experiencing degraded performance. We are continuing to investigate. Posted 7 hours ago. Jun 28, 2023 - 23:15 UTC \n Update Actions is experiencing degraded performance. We are continuing to investigate. Posted 8 hours ago. Jun 28, 2023 - 23:11 UTC \n Update \n Actions is operating normally. Posted 8 hours ago. Jun 28, 2023 - 23:01 UTC \n Investigating \n We are investigating reports of degraded performance for Actions and API Requests. Posted 8 hours ago. Jun 28, 2023 - 22:59 UTC \n', 'tags': '', 'url': 'Incidence.html'}, {'title': 'git commands', 'text': '深入了解與 Git 有關的 ebook:  https://git-scm.com/book/zh-tw/v2 \n  SourceTree.7z  (Git GUI 工具) \n 以下資訊為與 ChatGPT 對話的內容: \n  使用 git 的常見情境與對應指令有哪些?  \n 在使用 Git 的過程中，有一些常見的情境和對應的指令。以下是一些常見情境以及相應的 Git 指令：     1. 初始化一個新的儲存庫：   - "git init"：在當前目錄中初始化一個新的 Git 儲存庫。     2. 複製（Clone）一個遠端儲存庫：   - "git clone <儲存庫URL>"：複製一個遠端儲存庫到本地。     3. 提交（Commit）更改：   - "git add <文件>"：將文件添加到暫存區。   - "git commit -m "提交訊息""：將暫存區的更改提交到本地儲存庫。     4. 推送（Push）更改到遠端儲存庫：   - "git push <遠端名稱> <本地分支名稱>"：將本地分支的更改推送到遠端儲存庫。     5. 拉取（Pull）遠端儲存庫的最新更改：   - "git pull <遠端名稱> <遠端分支名稱>"：從遠端儲存庫拉取最新的更改並合併到當前分支。     6. 創建和切換分支：   - "git branch"：列出本地分支。   - "git branch <分支名稱>"：創建一個新的分支。   - "git checkout <分支名稱>"：切換到指定分支。     7. 合併（Merge）分支：   - "git merge <分支名稱>"：將指定分支的更改合併到當前分支。     8. 查看歷史記錄和狀態：   - "git log"：顯示提交歷史記錄。   - "git status"：顯示儲存庫的狀態，包括未提交的更改。     9. 撤銷更改：   - "git checkout -- <文件>"：撤銷對文件的修改，恢復到最後一次提交的狀態。   - "git reset HEAD <文件>"：從暫存區中移除文件，但保留本地的修改。 \n  請再舉一些例子:  \n 以下是更多的 Git 使用情境和相應的指令：     1. 查看和比較更改：   - "git diff"：顯示工作目錄中未暫存的更改。   - "git diff --staged"：顯示暫存區中的更改。     2. 切換分支並創建新分支：   - "git checkout -b <新分支名稱>"：創建一個新的分支並切換到該分支。     3. 刪除分支：   - "git branch -d <分支名稱>"：刪除本地分支。   - "git push <遠端名稱> --delete <分支名稱>"：刪除遠端分支。     4. 重新命名分支：   - "git branch -m <舊分支名稱> <新分支名稱>"：將本地分支重新命名。     5. 儲存和應用工作目錄上的暫時更改：   - "git stash"：將未提交的更改儲存為一個臨時存儲，並還原工作目錄到最後一次提交的狀態。   - "git stash apply"：應用最新的臨時存儲並還原更改。     6. 查看遠端儲存庫信息：   - "git remote -v"：顯示遠端儲存庫的詳細資訊，包括 URL。     7. 回溯到特定的提交：   - "git checkout <提交哈希值>"：切換到指定的提交。   - "git revert <提交哈希值>"：創建一個新的提交，撤銷指定的提交所引入的更改。     8. 標記和版本標籤：   - "git tag"：列出所有的標記。   - "git tag <標籤名稱>"：創建一個新的輕量級標籤。   - "git tag -a <標籤名稱> -m "標籤訊息""：創建一個包含訊息的帶注解的標籤。     9. 忽略文件：   - 在儲存庫的根目錄下創建一個名為 ".gitignore" 的文件，並列出要忽略的文件和目錄的模式。 \n  在多人協同的情況下, 與 git 有關的常見情境及指令有哪些?  \n \n 克隆遠端儲存庫：   - "git clone <儲存庫URL>"：複製遠端儲存庫到本地，以便多人協同開發。     2. 查看遠端儲存庫信息：   - "git remote -v"：查看遠端儲存庫的詳細資訊，包括 URL。     3. 拉取（Pull）最新更改：   - "git pull <遠端名稱> <遠端分支名稱>"：從遠端儲存庫拉取最新的更改並合併到當前分支。     4. 推送（Push）本地更改：   - "git push <遠端名稱> <本地分支名稱>"：將本地分支的更改推送到遠端儲存庫。     5. 分支操作：   - "git branch"：列出本地分支。   - "git branch -a"：列出所有分支，包括遠端分支。   - "git checkout <分支名稱>"：切換到指定分支。   - "git checkout -b <新分支名稱>"：創建一個新的分支並切換到該分支。   - "git branch -d <分支名稱>"：刪除本地分支。   - "git push <遠端名稱> --delete <分支名稱>"：刪除遠端分支。     6. 合併（Merge）分支：   - "git merge <分支名稱>"：將指定分支的更改合併到當前分支。     7. 解決衝突（Conflict）：   - 在合併分支時，如果遇到衝突，需要手動解決衝突。可以使用文本編輯器打開有衝突的文件，解決衝突後再執行 "git add" 和 "git commit" 來完成合併。     8. 查看歷史記錄和狀態：   - "git log"：顯示提交歷史記錄。   - "git status"：顯示儲存庫的狀態，包括未提交的更改。     9. 追蹤遠端分支：   - "git checkout --track <遠端名稱>/<遠端分支名稱>"：創建一個本地分支並追蹤遠端分支。     10. 拉取特定的遠端分支到本地：   - "git fetch <遠端名稱> <遠端分支名稱>:<本地分支名稱>"：從遠端儲存庫拉取特定分 \n \n', 'tags': '', 'url': 'git commands.html'}, {'title': 'git add', 'text': 'git add, git commit 與 git push 相關議題. \n 詢問   ChatGPT   : \n  如何向初學者說明 Git 指令中的 git add?  \n 當向初學者解釋 Git 指令中的 "git add" 時，可以使用以下方式進行說明：     "git add" 是 Git 版本控制系統中的一個指令，它的主要功能是將文件的更改加入到 Git 的暫存區（或稱為索引）中。在 Git 中，暫存區是一個重要的概念，它允許你將要提交的文件更改分開處理。     以下是一個對 "git add" 的解釋：     1. "git add" 是一個用於指示 Git 追蹤和紀錄文件更改的指令。   2. 當你對文件做出修改後，Git 並不會自動將這些更改紀錄下來。相反，你需要使用 "git add" 將更改添加到暫存區。   3. 暫存區是一個中間階段，它允許你選擇性地將特定文件或特定文件的更改紀錄下來，而不是將所有更改都直接提交到 Git 儲存庫。   4. 使用 "git add" 指定要加入暫存區的文件或文件夾，例如 "git add filename" 或 "git add foldername"。   5. 一旦你使用 "git add" 將文件更改添加到暫存區，Git 就會開始跟蹤這些更改，並準備將它們包含在下一次的提交中。     簡而言之，"git add" 是一個將文件更改紀錄下來並加入到 Git 暫存區的指令。這樣可以讓你選擇性地將特定的更改提交到版本控制系統中，而不是一次性提交所有更改。這樣可以提供更大的靈活性和精細的控制，並使版本控制更具效率。 \n 再問: \n  何謂 Git 暫存區（或稱為索引）?  \n Git 暫存區（或稱為索引）是 Git 版本控制系統中的一個重要概念，它在版本控制的過程中扮演了關鍵的角色。以下是對 Git 暫存區的解釋：     1. 暫存區是一個位於 Git 儲存庫中的中間區域。它用於暫時存放文件的更改，這些更改將在下一次提交（commit）時納入版本控制。   2. 當你對文件進行修改時，Git 不會自動將這些更改紀錄下來。相反，你需要使用 "git add" 將更改添加到暫存區。   3. 暫存區可以理解為一個緩衝區，它允許你選擇性地將特定文件或特定文件的更改分開處理，而不是將所有更改都直接提交到儲存庫。   4. 在進行 "git commit" 提交操作時，Git 會將暫存區中的文件快照（snapshot）記錄為一個新的提交。這樣的好處是你可以按照需要對更改進行分組，而不必一次性提交所有更改。   5. 使用暫存區可以提供更大的靈活性和精細的控制，因為你可以檢查即將提交的更改，並在提交之前對其進行調整或分離。     簡而言之，暫存區是 Git 版本控制系統中用於存放即將提交的文件更改的區域。它允許你選擇性地將特定文件或特定文件的更改紀錄下來，並在進行提交之前對其進行調整。這樣的機制提供了更大的彈性和細粒度的控制，幫助你更有效地管理和追蹤文件的變更。 \n 再問: \n  Git 暫存區是在倉儲的哪個地方, 資料會一直存在還只是暫存?  \n Git 暫存區（或稱為索引）是存放在 Git 儲存庫中的一個特殊文件，而不是存放在特定的目錄中。它是儲存庫的一部分，位於 ".git" 目錄中。暫存區本身並不是一個單獨的物理位置，而是儲存庫中的一個特定狀態。     資料在暫存區中只是暫時存在，並不會永久保存。當你對文件進行 "git add" 操作，Git 會將相應的更改紀錄到暫存區中。這些更改在提交之前只存在於暫存區，並且可以隨時進行修改或取消。     一旦你執行 "git commit" 命令提交更改，Git 將會根據暫存區中的內容創建一個新的提交（commit），並將該提交保存到儲存庫的歷史記錄中。這樣的提交會持久保存，成為了儲存庫的一部分。暫存區在每次提交後都會被清空，準備接收下一次更改。     因此，暫存區是一個用於暫時保存更改的區域，當你準備好提交這些更改時，它們將被永久記錄到儲存庫中。資料在暫存區中並不是永久存在的，而是在提交前的過程中的一個臨時階段。 \n 再問: \n  何謂提交?  \n 在版本控制系統（如Git）中，"提交"（commit）是指將文件或代碼更改保存到儲存庫的歷史記錄中的操作。提交創建了一個新的快照（snapshot），記錄了儲存庫在某個時間點上的狀態。以下是對提交的解釋：     1. 提交是版本控制系統中的重要概念，它表示你希望將文件或代碼更改永久地保存到儲存庫中。   2. 當你對文件進行修改並滿意結果後，可以使用 "git add" 命令將更改添加到 Git 的暫存區（或索引）中。   3. 一旦你將所有需要提交的更改都添加到暫存區中，可以使用 "git commit" 命令來創建一個新的提交。   4. 提交是一個具有唯一標識（commit hash）的快照，它記錄了儲存庫在提交時的狀態，包括被更改的文件和它們的內容。   5. 每個提交都可以包含一個相關的提交消息（commit message），用於描述這個提交所做的更改、修復的問題或任何相關信息。   6. 提交的歷史記錄是順序的，每次提交都建立在前一個提交的基礎之上，形成一個有向無環圖（DAG）結構。   7. 提交的歷史記錄使你能夠追蹤和恢復過去的更改，合作和協調工作，以及進行分支和合併操作等。     提交在版本控制中扮演著關鍵的角色，它確保了文件更改的持久性和可追蹤性。通過進行提交，你可以記錄並保留儲存庫在不同時間點上的狀態，並隨時查看、比較和回溯到過去的版本。 \n 再問: \n  當使用者執行 git add . 之後,\xa0 git.exe 具體做了甚麼動作?  \n 當使用者執行 "git add ." 命令後，"git.exe" 會執行以下動作來處理這個指令：     1. "git.exe" 會分析目前工作目錄中的所有更改，包括修改的文件和新建的文件。   2. 它會將這些更改的文件路徑和內容紀錄到 Git 儲存庫的暫存區中。暫存區實際上是一個特殊的 Git 檔案，位於 ".git" 目錄中，用於記錄即將提交的更改。   3. 如果有新的文件被添加到工作目錄中，它們將被添加到暫存區。對於已經存在的文件，它會比對工作目錄中的版本和暫存區中的版本之間的差異，並將這些差異紀錄到暫存區中。   4. "git.exe" 會為每個被添加到暫存區的文件生成一個 SHA-1 雜湊值，用於唯一識別文件的內容。   5. 在將文件的內容和元資料紀錄到暫存區後，"git.exe" 完成了 "git add ." 的操作。     總結來說，"git add ." 命令告訴 "git.exe" 將所有更改的文件路徑和內容紀錄到 Git 的暫存區中，準備進行提交。這樣可以將更改分開處理，提供了更大的彈性和控制，讓你能夠選擇性地提交特定的更改，而不是一次性提交所有更改。 \n 再問: \n  甚麼是文件的 SHA-1 雜湊值?  \n SHA-1（Secure Hash Algorithm 1）雜湊值是一種密碼學演算法，用於將數據（例如文件或消息）轉換為固定長度的唯一字串。在 Git 中，文件的 SHA-1 雜湊值是使用 SHA-1 算法計算出的 40 個字符的字串，用於唯一識別文件的內容。     以下是文件的 SHA-1 雜湊值的一些特點和作用：     1. 唯一性：SHA-1 算法通過將文件的內容轉換為唯一的雜湊值，確保不同文件具有不同的雜湊值。即使文件的內容只有微小的差異，其雜湊值也會完全不同。   2. 固定長度：SHA-1 雜湊值始終為 40 個字符，無論文件的大小。這使得雜湊值的長度在不同大小的文件中保持一致。   3. 安全性：SHA-1 是一個具有強大加密性能的雜湊算法。它對於碰撞（collision）攻擊的抵抗力相對較強，碰撞攻擊是指找到兩個不同的文件，它們的雜湊值相同。然而，由於 SHA-1 已經被認為不再足夠安全，因此在某些安全敏感的應用中已經被更強的雜湊算法（如 SHA-256）所取代。     在 Git 中，每個文件的內容都會被計算出一個唯一的 SHA-1 雜湊值。這個雜湊值用於識別文件，確保文件的完整性和不易被篡改。在儲存庫中，Git 使用這些雜湊值來追蹤文件的歷史、比較文件的更改，以及進行版本控制操作。 \n 再問: \n  如何說明密碼學演算法?  \n 密碼學演算法是用於處理數據的數學算法，旨在保護數據的安全性、完整性和機密性。它們使用各種數學和計算方法，以加密（加上密碼）和解密（解開密碼）的方式處理數據，使得只有擁有正確密鑰的人能夠解讀和存取數據。以下是對密碼學演算法的解釋：     1. 加密：密碼學演算法使用一個密鑰（通常是一個秘密的數字、字串或文件）來對數據進行加密。加密是將原始數據轉換成看似隨機的、不可讀的格式的過程。只有使用正確的密鑰進行解密操作，才能將加密後的數據還原為原始形式。   2. 解密：解密是使用相應的密鑰對加密數據進行反向操作，以還原出原始的、可讀的數據。只有擁有正確的密鑰的人才能夠成功解密並取得原始數據。   3. 對稱加密：在對稱加密中，同一個密鑰用於加密和解密數據。發送者和接收者必須共享同一個密鑰，並且將其保密。常見的對稱加密演算法有 AES（Advanced Encryption Standard）和 DES（Data Encryption Standard）。   4. 非對稱加密：在非對稱加密中，使用一對密鑰，包括公鑰和私鑰。公鑰用於加密數據，而相應的私鑰用於解密數據。公鑰可以公開分享，而私鑰必須保持秘密。常見的非對稱加密演算法有 RSA 和 ECC（Elliptic Curve Cryptography）。   5. 雜湊函數：雜湊函數將任意大小的數據轉換成固定長度的數字串，稱為雜湊值或摘要。這個過程是單向的，無法將雜湊值還原為原始數據。雜湊函數常用於校驗數據的完整性和識別數據的唯一性，並在密碼學中用於確保 \n', 'tags': '', 'url': 'git add.html'}, {'title': 'Replit', 'text': '查帳號設定與權限:   https://replit.com/account  \n 在 Replit 平台上學習 Python:   https://replit.com/learn/100-days-of-python  \n \n 本課程共有兩種方式利用 Replit 與 Github 建立並維護網站內容, 主要的網站內容 (靜態) 都以 Github Pages 為主, 而在 Replit 所啟動的動態網站則充作網站內容編輯之用: \n 第一種方法, 在 Replit 中建立 git 倉儲與網站所需內容, 再透過 git remote add 與 git push -u 與 Github 中的空倉儲整合, 其中的 cmsimde 可以直接作為倉儲目錄或者作為倉儲的子模組: \n 登入 Replit 後, 設法建立一個倉儲與遠端 Github 上的空倉儲同步. \n 為確保使用 "main" 作為主分支名稱，可以在 "git init" 之後加上 "git branch -m main" 指令。這將會將預設的分支名稱從 "master" 改為 "main"。操作流程如下：     1. 在 Replit 的終端機（Terminal）中，確定您目前所在的目錄是您想要作為 Git 倉儲的目錄。如果不是，您可以使用 "cd" 指令切換到正確的目錄。     2. 初始化 Git 倉儲：   - 執行指令 "git init"：這會在目前的目錄下初始化一個新的 Git 倉儲。     3. 將預設分支名稱改為 "main"：   - 執行指令 "git branch -m main"：這將把預設分支從 "master" 改為 "main"。     4. 連結到 GitHub 倉儲：   - 在 GitHub 上創建一個空的倉儲（Repository），並取得該倉儲的 URL。   - 在終端機中，執行指令 "git remote add origin <GitHub倉儲URL>"：這會將您的本地倉儲與 GitHub 倉儲連結起來。     5. 設定提交身分：   - 在 Replit 的右側窗格中，點擊「Secrets」選項卡。   - 在「Environment variables」區域，設定一個名為 "GIT_AUTHOR_NAME" 的變數，並設定您的名字。   - 設定一個名為 "GIT_AUTHOR_EMAIL" 的變數，並設定您的郵件地址。     6. 將本地的更改提交到 GitHub：   - 執行指令 "git add ."：將所有更改添加到暫存區。   - 執行指令 "git commit -m "Initial commit""：將更改提交到本地儲存庫。   - 執行指令 "git push -u origin main"：將本地的更改推送到 GitHub 倉儲。     現在，您的本地 Git 倉儲和 GitHub 上的倉儲已經連結起來，並且已設定提交身分，同時使用 "main" 作為主分支名稱。您可以在 Replit 上進行更改、提交和推送，並保持與 GitHub 上的倉儲同步。 \n 第二種方法則是在 Github 先建立好網站倉儲, 可以將 cmsimde 作為倉儲目錄或者作為子模組, 並利用 Github Pages 伺服倉儲中的靜態網站 (也就是 content 目錄中的超文件), 之後再將倉儲 import 進入 Replit 執行倉儲中的動態網站進行內容的編輯與改版. \n 注意: 利用 Replit 維護 Github 倉儲時, git add 與 git commit 必須透過 Tools 中的 Git 頁面完成, 然後 git push 則可以在 Git 頁面或 Shell 頁面執行 git push. \n', 'tags': '', 'url': 'Replit.html'}, {'title': '網際編輯', 'text': '使用 Replit 建立網際編輯環境 \n 以帳號登入 Replit (例如: wcms 或 Github/Gmail 帳號） \n 利用 import from Github 將 cmsimde 倉儲導入, 且使用 Python template \n 若倉儲將 cmsimde 作為子模組, 則導入後需要以 git submodule update --init --recursive 導入所有子模組 \n 下載子模組之後, 先以 Run 執行 main.py 啟動, 會顯示缺少模組, 之後再安裝下列模組 (若直接安裝下列模組, 將會出現 gevent 模組啟動錯誤) \n 在 Shell 區以 pip3 install flask flask_cors bs4 lxml pelican markdown pyopenssl gevent 安裝啟動 cmsimde 編輯環境所需的 Python3 模組 \n 開啟 repl 中的隱藏檔案後, 在 .replit 中的 [env] 區域加入 GIT_AUTHOR_NAME 與 GIT_AUTHOR_EMAIL 設定 \n Run main.py 後, 以瀏覽器開啟 cmsimde 編輯環境後, 進入 Config 修改管理者密碼後, 測試是否可以修改網站內容 \n Convert 之後以 git tool 執行 git commit and git push \n \n \n', 'tags': '', 'url': '網際編輯.html'}, {'title': '英文單字', 'text': '5000_words.txt  (需要下載密碼) \n 2016 年出版的   Programming with Python       書中收集 2244 個英文   單字出現次數   , 以及各單字的   查詢頁面   . \n 延伸專題: \n 根據上列網頁英文單字查詢結果, 是否能利用 Python 將查詢結果取出, 並與各英文單字結合, 成為之後的線上研習網頁? \n 從英文教科書中統計各單字出現字數的程式 (檔案存在 Github 帳號對應的 Gist 倉儲): \n 先利用     extract_text_from_pdf_file.py     將 pdf 檔案中的 text 取出. \n 然後再利用     check_vocabulary_from_cdict_net.pdf     查詢各英文單字的中文與英文解釋. \n 假如導入       pybean.py       與       SQLite       資料庫, 則可以利用       check_dictionary_save_into_sqlite.py       將 10821 個常見的英文單字的中英文說明與例句存入資料庫 (   cp2021_textbook_vocabulary_10821.sqlite   ). \n \n 2015 年出版的   Beginning Windows 10   書中收集的 3264 個   英文單字出現次數   與各單字的   查詢頁面   . \n 2022 年出版的   Windows 11 Made Easy   書中收集的 1432   個     英文單字出現次數     與各單字的     查詢頁面     .  \n', 'tags': '', 'url': '英文單字.html'}, {'title': '英文文法', 'text': 'English Grammar Made Easy: Everyday English \n', 'tags': '', 'url': '英文文法.html'}, {'title': 'Q&A', 'text': "All the Q and A are time-variant, different time may arise different Q and different A. \n Without 'Why', without power. \n 全球資訊網 \n Why WWW? \n Web3 \n Web 3.0 \n https://csarven.ca/linked-research-decentralised-web \n https://www.cnbc.com/video/2023/02/17/three-decades-after-inventing-the-web-tim-berners-lee-has-some-ideas-on-how-to-fix-it.html \n https://www.weforum.org/agenda/2023/03/what-is-web3-and-how-could-it-change-the-internet/ \n Web3 is the move towards a decentralized internet built on blockchain. Web 3.0, on the other hand, traces back to Berners-Lee’s original vision for the internet as a collection of websites linking everything together at the data level. \n Web Pages \n Why Web Pages? \n How to create Personal Web Pages? \n How to introduce yourself? \n Diploma \n Licenses \n Courses \n Projects \n Work experienes \n Awards \n Others \n Programming \n https://www.brookings.edu/wp-content/uploads/2021/10/How-S-Korea-implemented-its-CS-program_FINAL.pdf \n https://www.brookings.edu/wp-content/uploads/2021/10/How-England-implemented-its-computer-science-education-program-FINAL.pdf \n https://www.brookings.edu/wp-content/uploads/2021/10/How-BC-implemented-its-CS-education-program-FINAL.pdf \n 台灣與中國大陸計算機術語對照表 \n 學生計算機年會  (SITCon, Students' Information Technology Conference) \n \n", 'tags': '', 'url': 'Q&A.html'}, {'title': 'Computer', 'text': "我們對電腦軟硬體有多少認識? 從學習計算機程式、網際內容管理、電腦輔助設計與實習到協同產品設計實習的過程中, 該如何應用電腦? (眼前的桌上型電腦、筆記型電腦、平板、手機與各種為控制器) \n Physical and Virtual PC (VmWare, Hyper-V,   Virtualbox   , Parallels) \n Operating Systems: \n Windows \n Ubuntu \n Network: \n Internet \n The internet represents a global network of interconnected computer systems that facilitates the exchange of information and data across physical borders. This technology has emerged as one of the most significant inventions of modern times, transforming the way we communicate, conduct commerce, and access information.     At its core, the internet comprises millions of connected computing systems and servers, linked together through a sophisticated architecture of routers, switches, and other networking components. It enables users to access a diverse range of digital resources, including email, social media platforms, online shopping, and entertainment services.     The internet operates on a standardized set of protocols, such as Transmission Control Protocol/Internet Protocol (TCP/IP), which regulates the flow of data across the network. This allows computing devices, regardless of their location or operating system, to communicate and exchange information seamlessly.     The internet has brought about a significant transformation in many aspects of modern life, facilitating unprecedented access to information and services. Its global reach has expanded commercial opportunities for businesses, enabling them to extend their reach beyond geographical borders. Furthermore, the internet has fostered new opportunities for collaboration and communication between people separated by distance.     Nevertheless, the internet's ubiquitous nature and prevalence pose new challenges, including security threats and concerns over privacy. Consequently, significant research and development efforts continue towards developing new technologies and standards to bolster the security and resilience of the internet, while safeguarding its openness and accessibility for all users. \n WWW \n The World Wide Web (WWW) is an interconnected network of digital resources, which operates as a subset of the internet, providing users with an unprecedented ability to access and share information. The WWW has emerged as one of the most transformative technological advancements of the late 20th century, revolutionizing the way individuals obtain knowledge, conduct commerce, and collaborate with others.     At its core, the WWW relies on standardized protocols, such as the Hypertext Transfer Protocol (HTTP), which regulate the transmission and retrieval of web resources across the internet. Web servers host these resources, which clients typically access through a web browser.     The WWW has significantly impacted modern society, enabling individuals and businesses to share information and connect with others on a global scale. Through the WWW, users have access to an extensive range of digital resources, including web pages, multimedia content, and online services. The WWW has facilitated the globalization of commerce and expanded educational opportunities for learners around the world.     However, the WWW also presents new challenges, including concerns regarding privacy, security, and the spread of misinformation. As such, significant research and development efforts continue to focus on enhancing the security and reliability of the web, while preserving its openness and accessibility for all users. \n Git distributed version control system: \n  git_essential_document.7z   (password protected for cp2023) \n Git is a distributed version control system (VCS) designed for software development, providing a reliable and efficient means for managing source code and enabling collaborative development workflows. Developed by Linus Torvalds in 2005, it has since emerged as a widely adopted VCS, with a rich set of features and powerful tools for managing complex codebases.     Git allows developers to track changes to their codebase over time, by creating and maintaining a history of all modifications made to files and directories. It provides a decentralized architecture, where each developer has their own local copy of the repository, which can be synced with remote repositories, such as those hosted on GitHub or GitLab.     Git's robust set of features includes branching and merging, which enable developers to create isolated copies of the codebase, work on new features or bug fixes, and then merge those changes back into the main codebase when ready. This allows developers to experiment with new ideas and features, without disrupting the overall stability of the codebase.     Additionally, Git provides tools for resolving conflicts that may arise when multiple developers are working on the same codebase. It supports a wide range of workflows, including peer code review, continuous integration, and deployment, which enhance collaboration and productivity.     In conclusion, Git represents a key technology in modern software development, offering a flexible, scalable, and reliable means for managing codebases and enabling collaborative workflows. Its widespread adoption across the industry attests to its robustness and effectiveness in handling complex software development tasks. \n https://www.nchc.org.tw/  (國家高速網路與計算中心) \n \n", 'tags': '', 'url': 'Computer.html'}, {'title': 'Environment', 'text': '所處網路環境: \n Windows: ipconfig /all \n Ubuntu: ifconfig (need to install net-tools first: sudo pip install net-tools) \n IPv4 或(與) IPv6 網路環境 \n 相關影響: \n git push (through https or SSH) \n web browser (www servers in IPv4 or(and) IPv6, protocol in http or https) \n program execution (set http_proxy and https_proxy environment variables) \n SSH to remote server (through proxy server or not through proxy server) \n  2016 Practical IPv6 for Windows Administrators  \n  2020\xa0Learn Windows Subsystem for Linux  \n', 'tags': '', 'url': 'Environment.html'}, {'title': 'Ubuntu', 'text': ' https://en.wikipedia.org/wiki/Ubuntu   (Debian based) \n Alternatives: \n  https://almalinux.org/   (   RHEL   based) \n', 'tags': '', 'url': 'Ubuntu.html'}, {'title': 'Mobile', 'text': ' https://flutter.dev/  \n', 'tags': '', 'url': 'Mobile.html'}, {'title': 'Javascript', 'text': '瀏覽器就是你的計算機程式環境 \n  http://jsforcats.com/   (貓咪學 JavaScript) \n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide  \n  https://eloquentjavascript.net/  \n 利用 Javascript 寫的 CAD:   https://openjscad.xyz/  \n 目前的 cmsimde 可以直接在線上編輯 blog, 若 SStatic 出現問題, 可以連同在伺服器中啟動的主程式一併移除: \n 假設希望移除使用 8445 port 的應用程式: \n sudo kill -9 `sudo lsof -t -i:8445` \n jstlviewer.7z  (需要下載密碼) \n \n \n', 'tags': '', 'url': 'Javascript.html'}, {'title': 'Brython_env', 'text': 'Browser Python - Python in your Browser \n 在網頁中建立 Brython 程式環境: \n <!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script>\n<script type="text/python">\n# write your Brython codes here\n</script> \n Brython   modules   or   packages   can put into downloads/py directory \n A Python module is like a file containing special Python instructions that can be used by other Python files or programs. On the other hand, a script is a Python file that is meant to be directly run or executed. \n Python Modules 範例: \n 例如: 將 point.py 放入 downloads/py 目錄中: \n #point.py\ndef point():\n    return "可以傳回 point" \n 一旦導入上列引用 Brython 的頁面, 其中已經宣告 pythonpath 位於 static 與 downloads/py 目錄中, 因此 Brython 在頁面啟動時將導入當時位於這兩個目錄中的 .py 模組, 之後就可以透過 import 導入 point.py 作為模組: \n import point\nprint(point.point())\n\n# 執行後的結果將會印出 downloads/py/point.py 中的 point() 函式執行內容, 也就是"可以傳回 point". \n Python Packages 範例: \n 例如: 將 point2.py 放入 downloads/py/line/ 目錄中, 且在 line 目錄中加入一個空的 __init__.py 檔案. \n 且 point2.py 的內容與先前 point.py 的內容相同. 一旦上列導入 Brython 且宣告 pythonpath 位於 downloads/py 之後, 之後頁面中的 Brython 程式就可以採 import 的方式導入 line package, 並且使用 package 中的 point2.py modules. \n # 引用 line package 的範例\nfrom line import point2\nprint(point2.point())\n\n# 執行結果會印出"可以傳回 point" \n \n Question1: \n 利用 Brython 協助 markdown_form 編寫 Pelican blog 原始檔案. \n Question2: \n 利用 Brython 能否用來建立一個線上 Reveal.js 網際簡報系統編輯器? \n Question3: \n 透過   PyWeb3d   (   on Github   ), 能不能利用 Brython 建立一個 3D 的貪食蛇或俄羅斯方塊? \n Alternatives: \n  https://pyscript.net/  \n Brython 是一個讓您可以使用 Python 程式語言在瀏覽器中執行的工具。以下是一個簡單的說明，可用於向初學者解釋 Brython：     Brython 是 "Browser Python" 的縮寫，它是一個專為瀏覽器設計的 Python 執行環境。Python 是一個簡潔易讀且強大的程式語言，而 Brython 讓您能夠直接在瀏覽器中運行 Python 程式碼，而不需要任何額外的安裝或設定。     使用 Brython，您可以在網頁上編寫 Python 程式碼，並在瀏覽器中執行。這對於學習 Python 或在網頁上進行簡單的動態互動非常有用。您可以編寫各種功能，例如計算器、遊戲、表單驗證等等，並在瀏覽器中立即查看結果。     Brython 的優勢之一是它提供了與標準 Python 類似的語法和功能。這意味著您可以使用您已經熟悉的 Python 語法來編寫瀏覽器腳本，而不需要學習其他語言或概念。它支援大部分的 Python 3 語法和標準庫，這讓您可以使用許多內建函式、資料結構和模組。     使用 Brython，您可以將 Python 程式碼直接放在網頁的 "<script type=\'text/python\'>" 標籤中，或者使用外部腳本檔案引入。Brython 會解析並執行您的 Python 程式碼，並將結果顯示在網頁上。     總結來說，Brython 是一個讓您在瀏覽器中運行 Python 程式碼的工具。它使得在網頁上使用 Python 變得容易，並提供了與標準 Python 相似的語法和功能。如果您想要在網頁上進行簡單的動態互動或學習 Python，Brython 是一個很好的選擇。 \n  https://stackabuse.com/an-introductory-guide-to-brython/  \n  https://www.geeksforgeeks.org/introduction-to-brython/  \n  https://realpython.com/brython-python-in-browser/  \n https://bioshell.pl/azoledocking/ \n https://github.com/andy31lewis/brywidgets \n https://brython.info/gallery/bricks_py.html \n \n cmsite :  cp2023  uses   https://github.com/mdecycu/cmsimde   as submodule \n 請問為何要將 cmsimde 倉儲設為子模組? \n', 'tags': '', 'url': 'Brython_env.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Python', 'text': 'ajax.7z  (需要下載密碼) \n stl_splitter.7z  (需要下載密碼) \n Introduction to Programming using Java.pdf  (需要下載密碼) \n https://github.com/AllenDowney/ThinkPython2 \n https://wizardforcel.gitbooks.io/think-python-2e/content/0.html  (簡體中英文版) \n How to code in Python3 \n Algorithmic Problem Solving with Python \n 在 Replit 平台上學習 Python:   https://replit.com/learn/100-days-of-python  \n https://pp4e-book.github.io  ( https://github.com/pp4e-book/pp4e-book.github.io ) \n https://youtu.be/WFwH0d-Q2NY  (Python for Mechanical Engineers: Why and How to Switch to Python) \n Get started with Python  (Python for Mechanical Engineers) \n \n  https://do1.dr-chuck.com/pythonlearn/EN_us/pythonlearn.pdf  \n  https://python.swaroopch.com/  \n  https://github.com/wenbindu/ThinkPython2-CN  \n  https://automatetheboringstuff.com/2e/chapter0/  \n  https://utokyo-ipp.github.io/IPP_textbook.pdf   (   web   ) \n Flask based: \n  https://github.com/mdecycu/cmsimde  \n PyQt based: \n  https://github.com/leo-editor/leo-editor  \n  https://github.com/KmolYuan/Pyslvs-UI  \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Portable Python', 'text': '何謂可攜式 Python 程式環境? \n Python 程式是如何執行的? \n 首先 Python 是一種解譯式 (Interpreted) 程式語言, 與 C 或 C++ 程式語言最大的差別是, C/C++ 程式碼通常必須透過編譯 (Compile) 與連結 (Link) 的過程, 將原始碼轉為可執行的格式 (在 Windows 操作系統為 .exe 檔案), 而 Python 程式寫好後, 可以直接利用解譯器執行, 使用者不需要手動執行程式碼的編譯, 而是由解譯器在執行前即時將程式碼轉換為可執行檔案. \n 在       geeksforgeeks 網站   , 以下列敘述說明 Python 程式如何執行: \n Python is an object-oriented programming language like Java. Python is called an interpreted language. Python uses code modules that are interchangeable instead of a single long list of instructions that was standard for functional programming languages. The standard implementation of python is called "cpython". It is the default and widely used implementation of Python. \n Python doesn’t convert its code into machine code, something that hardware can understand. It actually converts it into something called byte code. So within python, compilation happens, but it’s just not into a machine language. It is into byte code (.pyc or .pyo) and this byte code can’t be understood by the CPU. So we need an interpreter called the python virtual machine to execute the byte codes \n 針對 Python 程式的"編譯"過程, 則   說明如下   : \n The Python program is converted into byte code. Byte code is a fixed set of instructions that represent arithmetic, comparison, memory operations, etc. It can run on any operating system and hardware. The byte code instructions are created in the .pyc file. The .pyc file is not explicitly created as Python handles it internally but it can be viewed with the following command: \n Y:\\tmp\\python_ex>python -m py_compile hello.py \n -m and py_compile represent module and module name respectively. This module is responsible to generate .pyc file. The compiler creates a directory named \xa0__pycache__ where it stores the hello.cpython-39.pyc file (若採用 Python 3.9 版次的編譯器). \n 至於針對 Python 程式的"解譯"執行過程, 則   說明如下   : \n The next step involves converting the byte code (.pyc file) into machine code. This step is necessary as the computer can understand only machine code (binary code). Python Virtual Machine (PVM) first understands the operating system and processor in the computer and then converts it into machine code. Further, these machine code instructions are executed by processor and the results are displayed. \n However, the interpreter inside the PVM translates the program line by line thereby consuming a lot of time. To overcome this, a compiler known as Just In Time (JIT) is added to PVM. JIT compiler improves the execution speed of the Python program. This compiler is not used in all Python environments like CPython which is standard Python software. \n To execute the hello.cpython-39.pyc we can use the following command: \n Y:\\tmp\\python_ex>python __pycache__\\hello.cpython-39.pyc \n 至於有關 python.exe 與 pythonw.exe 的差別, 則參見   這裡的說明   . 至於 SciTE 設定 python.properties 中, 使用 pythonw.exe -u 表示除了採非同步 (asynchronous) 執行模式外, 同時 force the stdout and stderr streams to be unbuffered; but has no effect on stdin. \n Python 解譯器的類別: \n 最早的 Python 解譯器以 C 程式語言編寫, 稱為       CPython   , 以 Python 編寫的 Python 解譯器稱為       Pypy   , 以 .NET 技術編寫的 Python 解譯器稱為       Ironpython   , 以 Java 編寫的 Python 解譯器稱為       Jython   , 以 Javascript 編寫的 Python 解譯器稱為       Brython   . 以 Rust 編寫的 Python 解譯器稱為       RustPython   . \n 建立可攜 Python 程式環境的目的: \n 一般在 Windows 10 中使用       CPython       都是透過操作系統安裝, 將       CPython       解譯器登錄在操作系統的       Registry       中. 只不過配置在操作系統的       CPython       解譯器若在使用過程中, 透過       pip       安裝額外的模組後, 當電腦輔助設計室中的電腦重新開機後, 操作系統將會因為安裝防寫套件而恢復原先所安裝無額外模組的狀態. \n 網際內容管理與協同產品設計實習課程為了   讓使用者可以隨身帶著       CPython       解譯器   , 因此繞過 Windows 10 操作系統的 Registry 登錄, 設法以批次檔案在虛擬的硬碟 (y:) 啟動       CPython       解譯環境. \n 此外, 配置在 USB 隨身碟的可攜       CPython       程式環境, 除了可執行一般 Python 程式外, 也可自行安裝所需模組, 並用於       cmsimde       動態與靜態網站編輯. \n 可攜程式環境中除       CPython   , 還可配置       MSYS2       C/C++ 編譯系統. 針對       SciTE   ,       Solvespace   ,       Range3   ,       CoppeliaSim       等開源套件執行編譯. \n 如何建立可攜 Python 程式環境? \n 能放入 USB 隨身碟執行的 Python 程式環境包含兩個部分: \n (1) Python 解譯器系統檔案 \n (2) 可攜啟動設定批次檔 (例如:       start_ipv6.bat   ) \n 要在 Windows 操作系統中, 取得各版本的 Python 解譯器系統檔案, 也有兩種方法: \n (1) 從官方網站下載安裝檔 (例如:       3.10.5 版   的       python-3.10.5-amd64.exe)   , 手動安裝 Python, 取下安裝內容後, 解除安裝程式. \n (2) 利用       gen_portable_python.py   , 從 Python 官方網站下載基本的 .msi 檔案 (例如       3.10.5 版   中的 core.msi, dev.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi), 然後利用       msiexec.exe       配合       targetdir       屬性解開各安裝檔. \n 以下將要結合       SciTE   ,       Tiny C Compiler       與       Python 3.10.5   , 建立一個可攜版的 CPython 與       ANSI C       執行環境. \n \n 從       http://download.savannah.gnu.org/releases/tinycc/       下載   tcc-0.9.27-win64-bin.zip   . \n 從       https://www.scintilla.org/SciTEDownload.html       下載       wscite521.zip   . \n 利用 Python 3.9.5 (或先前的 Python3 舊版可攜程式) 執行       gen_portable_python.py       取得 Python310 解譯器系統檔案. \n 根據上述流程建立的基本 Python 與 ANSI C 可攜程式系統       Portable_py310_tcc.7z       (只能在系網路 下載, 此一 Python 解譯器只帶有基本模組且尚未安裝       get-pip.py   ) \n 此一 Python 解譯器以 python       get-pip.py       安裝 pip 後, 再以 pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl 安裝       cmsimde 所需模組   後, 即可用於 wcm2022 動態與靜態系統的編輯. \n 此一 Python 解譯器再結合       Portablegit       與       PUTTY   , 就可以支援以       SSH       執行 github 倉儲的 git push. \n \n 如何建立網際 Python 程式環境 (Brython)? \n 例如:       Brython       頁面. \n 從       portable_python_wcm2022.7z       下載的可攜程式環境有哪些功能? \n  請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載   . \n \n  compile_copsim_cd2022.7z   (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為       cd2022       課程學員打造的套件). \n  portable_python_wcm2022.7z       (file size: 513 MB, extracted size: 2.3 G, 這是專門為       wcm2022       課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作) \n  drive.7z       (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY, tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與       Portablegit       結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作). \n \n 以下利用 Wink3 影片說明以 Hybrid 方式啟動的 USB 隨身碟如何建立? 以及使用上與完整 USB 隨身碟可攜程式系統的差別: \n Hybrid 可攜程式系統是只將必要檔案配置到 USB 隨身碟, 其餘檔案則使用已經存在電腦上的內容, 主要包含 Python 3.9.5 解譯程式 (863 MB) 與 Portblegit 2.31.1 (285 MB). \n Hybrid 可攜程式系統優點: \n \n 初始 USB 隨身碟只需複製 10.5 MB 的資料 (只自帶 PUTTY (4.3 MB), tcc (1.7 MB), tmp 與 wscite (4.3 MB)). \n 使用電腦 SSD 上所安裝的 Python 與 Portablegit, 執行速度會比一般 USB 隨身碟快. \n \n Hybrid 可攜程式系統缺點: \n \n 在未修改 Python Script 目錄中的 .exe 可執行檔之前, 必須透過 .py 執行, 例如: 命令列 中輸入 leo 並無法執行執行, 必須採用 import leo.core.runLeo;leo.core.runLeo.run() \n 若在裝有還原卡的電腦, 未修改 Python 系統模組路徑之前, 所安裝的額外模組無法放入 USB 隨身碟中. \n \n', 'tags': '', 'url': 'Portable Python.html'}, {'title': 'RoboDK', 'text': 'https://github.com/RoboDK/RoboDK-API  提供利用 Python 程式操控 RoboDK 套件中的多種 Robot. \n 已知 RoboDK 5.4.0 版之前與之後呼叫 RoboDK API 模組的方法有些差異, 因此先 fork RoboDK-API 至  https://github.com/mdecycu/RoboDK-API  之後, 再設法利用 Leo Editor 探討 RoboDK 5.2.2 版中 Python API 的用法, 之後再延伸至 5.4.0 之後的版本. \n 2023.07 最新的版本為  Download 5.6.2 \n Download 5.2.2  則發布於 2021.03.22 \n RoboDK 源自  https://www.parallemic.org/RoKiSim.html \n 在此我們將利用 RoboDK 中的 Robot 控制來練習 Python 各種語法的應用, 其中也將牽涉一些線性代數 (Linear Algebra,  1 ,  2 ) 與幾何 (Geometry,  1 ,  2 ,  3 ) 的應用. \n \n \n', 'tags': '', 'url': 'RoboDK.html'}, {'title': 'Database', 'text': 'Building a Web Application with Python and PostgreSQL  ( Part 2 ) \n https://docs.postgresql.tw/ \n', 'tags': '', 'url': 'Database.html'}, {'title': 'OSM', 'text': 'https://osm.tw/  (OpenStreeMap) \n', 'tags': '', 'url': 'OSM.html'}, {'title': 'Rust', 'text': 'https://youtu.be/BpPEoZW5IiY  (Youtube: Learn Rust Programming) \n https://rust-lang.tw/ \n', 'tags': '', 'url': 'Rust.html'}, {'title': 'Mojo', 'text': ' MLIR Primer: A Compiler Infrastructure for the End of Moore’s Law   (   paper   ) \n  https://docs.modular.com/mojo/why-mojo.html  \n  https://virtualgyan.com/mojo-lang-the-new-programming-language/  \n  https://www.modular.com/mojo  \n  https://github.com/modularml/mojo  \n  https://docs.modular.com/  \n  https://docs.modular.com/mojo/programming-manual.html  \n \n', 'tags': '', 'url': 'Mojo.html'}, {'title': 'ANSI C', 'text': 'ctutor.pdf  (需要下載密碼) \n functional_c.pdf  (需要下載密碼) \n ansic_ex.7z  (需要下載密碼) \n tcc_gnuplot_nicrohei.7z  (需要下載密碼) \n Mass-Spring-Damper model \n mass_spring_damper_modeling.pdf  (需要下載密碼) \n ansi_c_to_python_javascript_ex.7z  (需要下載密碼) \n gnuplotAction.pdf  (需要下載密碼) \n  https://www.learn-c.org/  \n  https://www.programiz.com/c-programming  \n http://hades.mech.northwestern.edu/images/6/68/CBook.pdf \n Linux: \n https://sysprog21.github.io/lkmpg/  (The Linux Kernel Module Programming Guide) \n 每位程式開發者都該有的記憶體知識 \n https://sysprog21.github.io/cpumemory-zhtw/  (中文) \n https://www.akkadia.org/drepper/cpumemory.pdf  (英文) \n https://github.com/sysprog21/ \n Arduino: \n  https://docs.arduino.cc/  \n  https://www.tinkercad.com/circuits  \n  https://github.com/lcgamboa/picsimlab  \n  https://wokwi.com/  \n  https://all3dp.com/2/best-arduino-simulators-online-offline/  \n Tiny C Compiler: \n  https://bellard.org/tcc/ ', 'tags': '', 'url': 'ANSI C.html'}, {'title': 'PICSimLab', 'text': ' https://www.youtube.com/watch?v=be96Ds8umig  \n Arduino \n Introduction to Arduino.pdf  (需要下載密碼) \n  https://github.com/lcgamboa/picsimlab   Programmable IC Simulator Laboratory \n  https://www.arduino.cc/en/software   Arduino IDE \n  https://com0com.sourceforge.net/   Null-modem Emulator \n PICSimLab 模擬 Arduino Uno (COM6) 與 Stepper Motor: \n \n \n 透過 PICSimLab Pin Viewer, 將 PB0/8, PB1/~9, PB2/~10 與 PB3/~11 與 Stepper Motor 接線. \n \n 透過 com0com 模擬 COM6 <-> COM4 連線. \n \n Arduino IDE 將 Stepper Motor 控制程式編譯後透過 COM4 經由 com0com 將程式經由 COM6 上傳到 Virtual Arduino Uno board. \n \n 接著希望可以利用 CoppeliaSim zmqRemoteAPI Python 讀取 PICSimLab 控制 Stepper Motor 的資料, 用來同步控制位於 CoppeliaSim 場景中的 Virtual Stepper Motor. \n Reference: \n  HoRoSim, a Holistic Robot Simulator: Arduino Code, Electronic Circuits and Physics   (   pdf   ) \n  scrum-1/horosim (github.com)  \n', 'tags': '', 'url': 'PICSimLab.html'}]};